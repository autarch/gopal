// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/autarch/metagodoc/api/models"
)

// GetRepositoryRepositoryRefRefOKCode is the HTTP code returned for type GetRepositoryRepositoryRefRefOK
const GetRepositoryRepositoryRefRefOKCode int = 200

/*GetRepositoryRepositoryRefRefOK OK

swagger:response getRepositoryRepositoryRefRefOK
*/
type GetRepositoryRepositoryRefRefOK struct {

	/*
	  In: Body
	*/
	Payload *models.Ref `json:"body,omitempty"`
}

// NewGetRepositoryRepositoryRefRefOK creates GetRepositoryRepositoryRefRefOK with default headers values
func NewGetRepositoryRepositoryRefRefOK() *GetRepositoryRepositoryRefRefOK {

	return &GetRepositoryRepositoryRefRefOK{}
}

// WithPayload adds the payload to the get repository repository ref ref o k response
func (o *GetRepositoryRepositoryRefRefOK) WithPayload(payload *models.Ref) *GetRepositoryRepositoryRefRefOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get repository repository ref ref o k response
func (o *GetRepositoryRepositoryRefRefOK) SetPayload(payload *models.Ref) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRepositoryRepositoryRefRefOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetRepositoryRepositoryRefRefDefault error

swagger:response getRepositoryRepositoryRefRefDefault
*/
type GetRepositoryRepositoryRefRefDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRepositoryRepositoryRefRefDefault creates GetRepositoryRepositoryRefRefDefault with default headers values
func NewGetRepositoryRepositoryRefRefDefault(code int) *GetRepositoryRepositoryRefRefDefault {
	if code <= 0 {
		code = 500
	}

	return &GetRepositoryRepositoryRefRefDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get repository repository ref ref default response
func (o *GetRepositoryRepositoryRefRefDefault) WithStatusCode(code int) *GetRepositoryRepositoryRefRefDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get repository repository ref ref default response
func (o *GetRepositoryRepositoryRefRefDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get repository repository ref ref default response
func (o *GetRepositoryRepositoryRefRefDefault) WithPayload(payload *models.Error) *GetRepositoryRepositoryRefRefDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get repository repository ref ref default response
func (o *GetRepositoryRepositoryRefRefDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRepositoryRepositoryRefRefDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
