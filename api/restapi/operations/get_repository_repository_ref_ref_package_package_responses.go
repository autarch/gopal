// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/autarch/metagodoc/api/models"
)

// GetRepositoryRepositoryRefRefPackagePackageOKCode is the HTTP code returned for type GetRepositoryRepositoryRefRefPackagePackageOK
const GetRepositoryRepositoryRefRefPackagePackageOKCode int = 200

/*GetRepositoryRepositoryRefRefPackagePackageOK OK

swagger:response getRepositoryRepositoryRefRefPackagePackageOK
*/
type GetRepositoryRepositoryRefRefPackagePackageOK struct {

	/*
	  In: Body
	*/
	Payload *models.Package `json:"body,omitempty"`
}

// NewGetRepositoryRepositoryRefRefPackagePackageOK creates GetRepositoryRepositoryRefRefPackagePackageOK with default headers values
func NewGetRepositoryRepositoryRefRefPackagePackageOK() *GetRepositoryRepositoryRefRefPackagePackageOK {

	return &GetRepositoryRepositoryRefRefPackagePackageOK{}
}

// WithPayload adds the payload to the get repository repository ref ref package package o k response
func (o *GetRepositoryRepositoryRefRefPackagePackageOK) WithPayload(payload *models.Package) *GetRepositoryRepositoryRefRefPackagePackageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get repository repository ref ref package package o k response
func (o *GetRepositoryRepositoryRefRefPackagePackageOK) SetPayload(payload *models.Package) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRepositoryRepositoryRefRefPackagePackageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetRepositoryRepositoryRefRefPackagePackageDefault error

swagger:response getRepositoryRepositoryRefRefPackagePackageDefault
*/
type GetRepositoryRepositoryRefRefPackagePackageDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRepositoryRepositoryRefRefPackagePackageDefault creates GetRepositoryRepositoryRefRefPackagePackageDefault with default headers values
func NewGetRepositoryRepositoryRefRefPackagePackageDefault(code int) *GetRepositoryRepositoryRefRefPackagePackageDefault {
	if code <= 0 {
		code = 500
	}

	return &GetRepositoryRepositoryRefRefPackagePackageDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get repository repository ref ref package package default response
func (o *GetRepositoryRepositoryRefRefPackagePackageDefault) WithStatusCode(code int) *GetRepositoryRepositoryRefRefPackagePackageDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get repository repository ref ref package package default response
func (o *GetRepositoryRepositoryRefRefPackagePackageDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get repository repository ref ref package package default response
func (o *GetRepositoryRepositoryRefRefPackagePackageDefault) WithPayload(payload *models.Error) *GetRepositoryRepositoryRefRefPackagePackageDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get repository repository ref ref package package default response
func (o *GetRepositoryRepositoryRefRefPackagePackageDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRepositoryRepositoryRefRefPackagePackageDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
