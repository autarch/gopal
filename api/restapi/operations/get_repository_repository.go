// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetRepositoryRepositoryHandlerFunc turns a function with the right signature into a get repository repository handler
type GetRepositoryRepositoryHandlerFunc func(GetRepositoryRepositoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRepositoryRepositoryHandlerFunc) Handle(params GetRepositoryRepositoryParams) middleware.Responder {
	return fn(params)
}

// GetRepositoryRepositoryHandler interface for that can handle valid get repository repository params
type GetRepositoryRepositoryHandler interface {
	Handle(GetRepositoryRepositoryParams) middleware.Responder
}

// NewGetRepositoryRepository creates a new http.Handler for the get repository repository operation
func NewGetRepositoryRepository(ctx *middleware.Context, handler GetRepositoryRepositoryHandler) *GetRepositoryRepository {
	return &GetRepositoryRepository{Context: ctx, Handler: handler}
}

/*GetRepositoryRepository swagger:route GET /repository/{repository} getRepositoryRepository

GetRepositoryRepository get repository repository API

*/
type GetRepositoryRepository struct {
	Context *middleware.Context
	Handler GetRepositoryRepositoryHandler
}

func (o *GetRepositoryRepository) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRepositoryRepositoryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
