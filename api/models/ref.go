// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Ref ref
// swagger:model ref
type Ref struct {

	// is default branch
	IsDefaultBranch bool `json:"is_default_branch,omitempty"`

	// last seen commit
	LastSeenCommit strfmt.DateTime `json:"last_seen_commit,omitempty"`

	// last updated
	LastUpdated strfmt.DateTime `json:"last_updated,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// packages
	Packages []*Package `json:"packages"`

	// ref type
	RefType string `json:"ref_type,omitempty"`

	// repository
	Repository string `json:"repository,omitempty"`
}

// Validate validates this ref
func (m *Ref) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastSeenCommit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePackages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRefType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Ref) validateLastSeenCommit(formats strfmt.Registry) error {

	if swag.IsZero(m.LastSeenCommit) { // not required
		return nil
	}

	if err := validate.FormatOf("last_seen_commit", "body", "date-time", m.LastSeenCommit.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Ref) validateLastUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Ref) validatePackages(formats strfmt.Registry) error {

	if swag.IsZero(m.Packages) { // not required
		return nil
	}

	for i := 0; i < len(m.Packages); i++ {

		if swag.IsZero(m.Packages[i]) { // not required
			continue
		}

		if m.Packages[i] != nil {

			if err := m.Packages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packages" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

var refTypeRefTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["branch","tag"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		refTypeRefTypePropEnum = append(refTypeRefTypePropEnum, v)
	}
}

const (

	// RefRefTypeBranch captures enum value "branch"
	RefRefTypeBranch string = "branch"

	// RefRefTypeTag captures enum value "tag"
	RefRefTypeTag string = "tag"
)

// prop value enum
func (m *Ref) validateRefTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, refTypeRefTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Ref) validateRefType(formats strfmt.Registry) error {

	if swag.IsZero(m.RefType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRefTypeEnum("ref_type", "body", m.RefType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Ref) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Ref) UnmarshalBinary(b []byte) error {
	var res Ref
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
