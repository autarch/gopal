// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Type type
// swagger:model type
type Type struct {

	// consts
	Consts []*Value `json:"consts"`

	// decl
	Decl *Code `json:"decl,omitempty"`

	// doc
	Doc string `json:"doc,omitempty"`

	// examples
	Examples []*Example `json:"examples"`

	// funcs
	Funcs []*Func `json:"funcs"`

	// methods
	Methods []*Func `json:"methods"`

	// name
	Name string `json:"name,omitempty"`

	// pos
	Pos *Pos `json:"pos,omitempty"`

	// vars
	Vars []*Value `json:"vars"`
}

// Validate validates this type
func (m *Type) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConsts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDecl(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExamples(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFuncs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMethods(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePos(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVars(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Type) validateConsts(formats strfmt.Registry) error {

	if swag.IsZero(m.Consts) { // not required
		return nil
	}

	for i := 0; i < len(m.Consts); i++ {

		if swag.IsZero(m.Consts[i]) { // not required
			continue
		}

		if m.Consts[i] != nil {

			if err := m.Consts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consts" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *Type) validateDecl(formats strfmt.Registry) error {

	if swag.IsZero(m.Decl) { // not required
		return nil
	}

	if m.Decl != nil {

		if err := m.Decl.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("decl")
			}
			return err
		}

	}

	return nil
}

func (m *Type) validateExamples(formats strfmt.Registry) error {

	if swag.IsZero(m.Examples) { // not required
		return nil
	}

	for i := 0; i < len(m.Examples); i++ {

		if swag.IsZero(m.Examples[i]) { // not required
			continue
		}

		if m.Examples[i] != nil {

			if err := m.Examples[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("examples" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *Type) validateFuncs(formats strfmt.Registry) error {

	if swag.IsZero(m.Funcs) { // not required
		return nil
	}

	for i := 0; i < len(m.Funcs); i++ {

		if swag.IsZero(m.Funcs[i]) { // not required
			continue
		}

		if m.Funcs[i] != nil {

			if err := m.Funcs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("funcs" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *Type) validateMethods(formats strfmt.Registry) error {

	if swag.IsZero(m.Methods) { // not required
		return nil
	}

	for i := 0; i < len(m.Methods); i++ {

		if swag.IsZero(m.Methods[i]) { // not required
			continue
		}

		if m.Methods[i] != nil {

			if err := m.Methods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("methods" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *Type) validatePos(formats strfmt.Registry) error {

	if swag.IsZero(m.Pos) { // not required
		return nil
	}

	if m.Pos != nil {

		if err := m.Pos.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pos")
			}
			return err
		}

	}

	return nil
}

func (m *Type) validateVars(formats strfmt.Registry) error {

	if swag.IsZero(m.Vars) { // not required
		return nil
	}

	for i := 0; i < len(m.Vars); i++ {

		if swag.IsZero(m.Vars[i]) { // not required
			continue
		}

		if m.Vars[i] != nil {

			if err := m.Vars[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vars" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Type) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Type) UnmarshalBinary(b []byte) error {
	var res Type
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
