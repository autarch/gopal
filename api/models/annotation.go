// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Annotation annotation
// swagger:model annotation
type Annotation struct {

	// end
	End int32 `json:"end,omitempty"`

	// kind
	Kind string `json:"kind,omitempty"`

	// path index
	PathIndex int16 `json:"path_index,omitempty"`

	// pos
	Pos int32 `json:"pos,omitempty"`
}

// Validate validates this annotation
func (m *Annotation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKind(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var annotationTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["link","anchor","comment","package-link","builtin"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		annotationTypeKindPropEnum = append(annotationTypeKindPropEnum, v)
	}
}

const (

	// AnnotationKindLink captures enum value "link"
	AnnotationKindLink string = "link"

	// AnnotationKindAnchor captures enum value "anchor"
	AnnotationKindAnchor string = "anchor"

	// AnnotationKindComment captures enum value "comment"
	AnnotationKindComment string = "comment"

	// AnnotationKindPackageLink captures enum value "package-link"
	AnnotationKindPackageLink string = "package-link"

	// AnnotationKindBuiltin captures enum value "builtin"
	AnnotationKindBuiltin string = "builtin"
)

// prop value enum
func (m *Annotation) validateKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, annotationTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Annotation) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Annotation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Annotation) UnmarshalBinary(b []byte) error {
	var res Annotation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
