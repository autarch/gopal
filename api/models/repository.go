// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Repository repository
// swagger:model repository
type Repository struct {

	// about
	About *RepositoryAbout `json:"about,omitempty"`

	// created
	Created strfmt.DateTime `json:"created,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// forks
	Forks int64 `json:"forks,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// issues
	Issues *Issues `json:"issues,omitempty"`

	// last crawled
	LastCrawled strfmt.DateTime `json:"last_crawled,omitempty"`

	// last updated
	LastUpdated strfmt.DateTime `json:"last_updated,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// owner
	Owner string `json:"owner,omitempty"`

	// primary url
	PrimaryURL strfmt.URI `json:"primary_url,omitempty"`

	// pull requests
	PullRequests *Issues `json:"pull_requests,omitempty"`

	// refs
	Refs []*RepositoryRefsItems `json:"refs"`

	// stars
	Stars int64 `json:"stars,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// vcs
	Vcs string `json:"vcs,omitempty"`
}

// Validate validates this repository
func (m *Repository) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbout(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIssues(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastCrawled(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrimaryURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePullRequests(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRefs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVcs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Repository) validateAbout(formats strfmt.Registry) error {

	if swag.IsZero(m.About) { // not required
		return nil
	}

	if m.About != nil {

		if err := m.About.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("about")
			}
			return err
		}

	}

	return nil
}

func (m *Repository) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Repository) validateIssues(formats strfmt.Registry) error {

	if swag.IsZero(m.Issues) { // not required
		return nil
	}

	if m.Issues != nil {

		if err := m.Issues.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issues")
			}
			return err
		}

	}

	return nil
}

func (m *Repository) validateLastCrawled(formats strfmt.Registry) error {

	if swag.IsZero(m.LastCrawled) { // not required
		return nil
	}

	if err := validate.FormatOf("last_crawled", "body", "date-time", m.LastCrawled.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Repository) validateLastUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Repository) validatePrimaryURL(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryURL) { // not required
		return nil
	}

	if err := validate.FormatOf("primary_url", "body", "uri", m.PrimaryURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Repository) validatePullRequests(formats strfmt.Registry) error {

	if swag.IsZero(m.PullRequests) { // not required
		return nil
	}

	if m.PullRequests != nil {

		if err := m.PullRequests.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pull_requests")
			}
			return err
		}

	}

	return nil
}

func (m *Repository) validateRefs(formats strfmt.Registry) error {

	if swag.IsZero(m.Refs) { // not required
		return nil
	}

	for i := 0; i < len(m.Refs); i++ {

		if swag.IsZero(m.Refs[i]) { // not required
			continue
		}

		if m.Refs[i] != nil {

			if err := m.Refs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("refs" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

var repositoryTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","dead-end-fork","quick-fork","no-recent-commits","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		repositoryTypeStatusPropEnum = append(repositoryTypeStatusPropEnum, v)
	}
}

const (

	// RepositoryStatusActive captures enum value "active"
	RepositoryStatusActive string = "active"

	// RepositoryStatusDeadEndFork captures enum value "dead-end-fork"
	RepositoryStatusDeadEndFork string = "dead-end-fork"

	// RepositoryStatusQuickFork captures enum value "quick-fork"
	RepositoryStatusQuickFork string = "quick-fork"

	// RepositoryStatusNoRecentCommits captures enum value "no-recent-commits"
	RepositoryStatusNoRecentCommits string = "no-recent-commits"

	// RepositoryStatusInactive captures enum value "inactive"
	RepositoryStatusInactive string = "inactive"
)

// prop value enum
func (m *Repository) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, repositoryTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Repository) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var repositoryTypeVcsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bzr","git","hg","svn"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		repositoryTypeVcsPropEnum = append(repositoryTypeVcsPropEnum, v)
	}
}

const (

	// RepositoryVcsBzr captures enum value "bzr"
	RepositoryVcsBzr string = "bzr"

	// RepositoryVcsGit captures enum value "git"
	RepositoryVcsGit string = "git"

	// RepositoryVcsHg captures enum value "hg"
	RepositoryVcsHg string = "hg"

	// RepositoryVcsSvn captures enum value "svn"
	RepositoryVcsSvn string = "svn"
)

// prop value enum
func (m *Repository) validateVcsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, repositoryTypeVcsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Repository) validateVcs(formats strfmt.Registry) error {

	if swag.IsZero(m.Vcs) { // not required
		return nil
	}

	// value enum
	if err := m.validateVcsEnum("vcs", "body", m.Vcs); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Repository) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Repository) UnmarshalBinary(b []byte) error {
	var res Repository
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
