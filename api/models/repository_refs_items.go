// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RepositoryRefsItems repository refs items
// swagger:model repositoryRefsItems
type RepositoryRefsItems struct {

	// is default branch
	IsDefaultBranch bool `json:"is_default_branch,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// ref type
	RefType string `json:"ref_type,omitempty"`
}

// Validate validates this repository refs items
func (m *RepositoryRefsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRefType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var repositoryRefsItemsTypeRefTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["branch","tag"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		repositoryRefsItemsTypeRefTypePropEnum = append(repositoryRefsItemsTypeRefTypePropEnum, v)
	}
}

const (

	// RepositoryRefsItemsRefTypeBranch captures enum value "branch"
	RepositoryRefsItemsRefTypeBranch string = "branch"

	// RepositoryRefsItemsRefTypeTag captures enum value "tag"
	RepositoryRefsItemsRefTypeTag string = "tag"
)

// prop value enum
func (m *RepositoryRefsItems) validateRefTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, repositoryRefsItemsTypeRefTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RepositoryRefsItems) validateRefType(formats strfmt.Registry) error {

	if swag.IsZero(m.RefType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRefTypeEnum("ref_type", "body", m.RefType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryRefsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryRefsItems) UnmarshalBinary(b []byte) error {
	var res RepositoryRefsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
