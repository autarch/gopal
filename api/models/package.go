// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Package package
// swagger:model package
type Package struct {

	// consts
	Consts []*Value `json:"consts"`

	// doc
	Doc string `json:"doc,omitempty"`

	// errors
	Errors []string `json:"errors"`

	// examples
	Examples []*Example `json:"examples"`

	// files
	Files []*File `json:"files"`

	// funcs
	Funcs []*Func `json:"funcs"`

	// import path
	ImportPath string `json:"import_path,omitempty"`

	// imports
	Imports []string `json:"imports"`

	// is command
	IsCommand bool `json:"is_command,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// ref
	Ref string `json:"ref,omitempty"`

	// repository
	Repository string `json:"repository,omitempty"`

	// synopsis
	Synopsis string `json:"synopsis,omitempty"`

	// test imports
	TestImports []string `json:"test_imports"`

	// types
	Types []*Type `json:"types"`

	// vars
	Vars []*Value `json:"vars"`

	// x test imports
	XTestImports []string `json:"x_test_imports"`
}

// Validate validates this package
func (m *Package) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConsts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExamples(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFiles(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFuncs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImports(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTestImports(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTypes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVars(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateXTestImports(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Package) validateConsts(formats strfmt.Registry) error {

	if swag.IsZero(m.Consts) { // not required
		return nil
	}

	for i := 0; i < len(m.Consts); i++ {

		if swag.IsZero(m.Consts[i]) { // not required
			continue
		}

		if m.Consts[i] != nil {

			if err := m.Consts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consts" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *Package) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	return nil
}

func (m *Package) validateExamples(formats strfmt.Registry) error {

	if swag.IsZero(m.Examples) { // not required
		return nil
	}

	for i := 0; i < len(m.Examples); i++ {

		if swag.IsZero(m.Examples[i]) { // not required
			continue
		}

		if m.Examples[i] != nil {

			if err := m.Examples[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("examples" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *Package) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Files) { // not required
		return nil
	}

	for i := 0; i < len(m.Files); i++ {

		if swag.IsZero(m.Files[i]) { // not required
			continue
		}

		if m.Files[i] != nil {

			if err := m.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *Package) validateFuncs(formats strfmt.Registry) error {

	if swag.IsZero(m.Funcs) { // not required
		return nil
	}

	for i := 0; i < len(m.Funcs); i++ {

		if swag.IsZero(m.Funcs[i]) { // not required
			continue
		}

		if m.Funcs[i] != nil {

			if err := m.Funcs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("funcs" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *Package) validateImports(formats strfmt.Registry) error {

	if swag.IsZero(m.Imports) { // not required
		return nil
	}

	return nil
}

func (m *Package) validateTestImports(formats strfmt.Registry) error {

	if swag.IsZero(m.TestImports) { // not required
		return nil
	}

	return nil
}

func (m *Package) validateTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.Types) { // not required
		return nil
	}

	for i := 0; i < len(m.Types); i++ {

		if swag.IsZero(m.Types[i]) { // not required
			continue
		}

		if m.Types[i] != nil {

			if err := m.Types[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("types" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *Package) validateVars(formats strfmt.Registry) error {

	if swag.IsZero(m.Vars) { // not required
		return nil
	}

	for i := 0; i < len(m.Vars); i++ {

		if swag.IsZero(m.Vars[i]) { // not required
			continue
		}

		if m.Vars[i] != nil {

			if err := m.Vars[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vars" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *Package) validateXTestImports(formats strfmt.Registry) error {

	if swag.IsZero(m.XTestImports) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Package) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Package) UnmarshalBinary(b []byte) error {
	var res Package
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
